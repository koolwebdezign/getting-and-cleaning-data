1+2
3*34
sqrt(16)
sqrt(2)
install.packages("rJava")
install.packages("rJava")
install.packages("xlsx")
library(xlsx)
library(xlsx)
library(rJava)
install.packages("rJava")
library(rJava)
library(rJava)
library(rJava)
install.packages(c("boot", "class", "cluster", "codetools", "foreign", "KernSmooth", "lattice", "MASS", "Matrix", "mgcv", "nlme", "nnet", "rpart", "spatial", "survival"))
library(rJava)
library(rJava)
install.packages("rJava")
install.packages("rJava")
library(rJava)
library(rJava)
install.packages("xlsx")
library(xlsx)
ls()
library(rJava)
setwd("C:/Users/j12welch/DataScienceProjects/getting-and-cleaning-data")
# This program has been developed by KoolWebDezign as part of an assignment from the
# 'Getting And Cleaning Data' course contained within the 'Data Science Specialization'
# offered by John Hopkins University on http://www.coursera.org.
# Please see the included README.md file for further background information on this
# assignment.  Please see also the CodeBook.md file for more information about the technical
# details related to the development and use of this R programming script.
# Get raw data as directed within the assignment and store in local directory named 'data'
# or other folder as controlled by the user_folder variable defined below.  The target data
# file is located on the internet at the following location.
# https://d396qusza40orc.cloudfront.net/getdata%2Fprojectfiles%2FUCI%20HAR%20Dataset.zip
# Clear your workspace from active variables
rm(list=ls())
# Initialize user controlled variables
user_folder <- "data"
# Initialize critical program variables
file_name_str <- "getdata%2Fprojectfiles%2FUCI%20HAR%20Dataset.zip"
local_folder_name <- paste(user_folder, "/getdata-projectfiles-UCI-HAR-Dataset", sep="")
local_file_name <- paste(user_folder, "/", file_name_str, sep="")
# Test for existence of user_folder.  Download data if data is missiing.
if (!file.exists(user_folder)) {
dir.create(user_folder)
# The 'downloader' library is required for execution of this program
test <- require(downloader)
if (!test) {
install.packages("downloader")
require(downloader)
}
# Download the data
data_url <- "https://d396qusza40orc.cloudfront.net/getdata%2Fprojectfiles%2FUCI%20HAR%20Dataset.zip"
download(data_url, dest=local_file_name, mode="wb")
# Unzip the downloaded files
dir.create(local_folder_name)
unzip (local_file_name, exdir=local_folder_name)
}
# Save current working directory for return at end of program
home_wd <- getwd()
# Set new working directory
new_wd <- paste(local_folder_name, "/", "UCI HAR Dataset", sep="")
setwd(new_wd)
# Read in the data from files
features     = read.table('./features.txt',header=FALSE); #imports features.txt
activityType = read.table('./activity_labels.txt',header=FALSE); #imports activity_labels.txt
subjectTrain = read.table('./train/subject_train.txt',header=FALSE); #imports subject_train.txt
xTrain       = read.table('./train/x_train.txt',header=FALSE); #imports x_train.txt
yTrain       = read.table('./train/y_train.txt',header=FALSE); #imports y_train.txt
subjectTest = read.table('./test/subject_test.txt',header=FALSE); #imports subject_test.txt
xTest       = read.table('./test/x_test.txt',header=FALSE); #imports x_test.txt
yTest       = read.table('./test/y_test.txt',header=FALSE); #imports y_test.txt
# Assign column names to the data imported above
colnames(activityType)  = c('activityId','activityType');
colnames(subjectTrain)  = "subjectId";
colnames(xTrain)        = features[,2];
colnames(yTrain)        = "activityId";
# Set working directory back to original setting
setwd(home_wd)
# This program has been developed by KoolWebDezign as part of an assignment from the
# 'Getting And Cleaning Data' course contained within the 'Data Science Specialization'
# offered by John Hopkins University on http://www.coursera.org.
# Please see the included README.md file for further background information on this
# assignment.  Please see also the CodeBook.md file for more information about the technical
# details related to the development and use of this R programming script.
# Get raw data as directed within the assignment and store in local directory named 'data'
# or other folder as controlled by the user_folder variable defined below.  The target data
# file is located on the internet at the following location.
# https://d396qusza40orc.cloudfront.net/getdata%2Fprojectfiles%2FUCI%20HAR%20Dataset.zip
# Clear your workspace from active variables
rm(list=ls())
# Initialize user controlled variables
user_folder <- "data"
# Initialize critical program variables
file_name_str <- "getdata%2Fprojectfiles%2FUCI%20HAR%20Dataset.zip"
local_folder_name <- paste(user_folder, "/getdata-projectfiles-UCI-HAR-Dataset", sep="")
local_file_name <- paste(user_folder, "/", file_name_str, sep="")
# Test for existence of user_folder.  Download data if data is missiing.
if (!file.exists(user_folder)) {
dir.create(user_folder)
# The 'downloader' library is required for execution of this program
test <- require(downloader)
if (!test) {
install.packages("downloader")
require(downloader)
}
# Download the data
data_url <- "https://d396qusza40orc.cloudfront.net/getdata%2Fprojectfiles%2FUCI%20HAR%20Dataset.zip"
download(data_url, dest=local_file_name, mode="wb")
# Unzip the downloaded files
dir.create(local_folder_name)
unzip (local_file_name, exdir=local_folder_name)
}
# Save current working directory for return at end of program
home_wd <- getwd()
# Set new working directory
new_wd <- paste(local_folder_name, "/", "UCI HAR Dataset", sep="")
setwd(new_wd)
# Read in the data from files
features     = read.table('./features.txt',header=FALSE); #imports features.txt
activityType = read.table('./activity_labels.txt',header=FALSE); #imports activity_labels.txt
subjectTrain = read.table('./train/subject_train.txt',header=FALSE); #imports subject_train.txt
xTrain       = read.table('./train/x_train.txt',header=FALSE); #imports x_train.txt
yTrain       = read.table('./train/y_train.txt',header=FALSE); #imports y_train.txt
subjectTest = read.table('./test/subject_test.txt',header=FALSE); #imports subject_test.txt
xTest       = read.table('./test/x_test.txt',header=FALSE); #imports x_test.txt
yTest       = read.table('./test/y_test.txt',header=FALSE); #imports y_test.txt
# Assign column names to the data imported above
colnames(activityType)  = c('activityId','activityType');
colnames(subjectTrain)  = "subjectId";
colnames(xTrain)        = features[,2];
colnames(yTrain)        = "activityId";
# Set working directory back to original setting
setwd(home_wd)
View(features)
View(activityType)
# This program has been developed by KoolWebDezign as part of an assignment from the
# 'Getting And Cleaning Data' course contained within the 'Data Science Specialization'
# offered by John Hopkins University on http://www.coursera.org.
# Please see the included README.md file for further background information on this
# assignment.  Please see also the CodeBook.md file for more information about the technical
# details related to the development and use of this R programming script.
# Get raw data as directed within the assignment and store in local directory named 'data'
# or other folder as controlled by the user_folder variable defined below.  The target data
# file is located on the internet at the following location.
# https://d396qusza40orc.cloudfront.net/getdata%2Fprojectfiles%2FUCI%20HAR%20Dataset.zip
# Clear your workspace from active variables
rm(list=ls())
# Initialize user controlled variables
user_folder <- "data"
# Initialize critical program variables
file_name_str <- "getdata%2Fprojectfiles%2FUCI%20HAR%20Dataset.zip"
local_folder_name <- paste(user_folder, "/getdata-projectfiles-UCI-HAR-Dataset", sep="")
local_file_name <- paste(user_folder, "/", file_name_str, sep="")
# Test for existence of user_folder.  Download data if data is missiing.
if (!file.exists(user_folder)) {
dir.create(user_folder)
# The 'downloader' library is required for execution of this program
test <- require(downloader)
if (!test) {
install.packages("downloader")
require(downloader)
}
# Download the data
data_url <- "https://d396qusza40orc.cloudfront.net/getdata%2Fprojectfiles%2FUCI%20HAR%20Dataset.zip"
download(data_url, dest=local_file_name, mode="wb")
# Unzip the downloaded files
dir.create(local_folder_name)
unzip (local_file_name, exdir=local_folder_name)
}
# Save current working directory for return at end of program
home_wd <- getwd()
# Set new working directory
new_wd <- paste(local_folder_name, "/", "UCI HAR Dataset", sep="")
setwd(new_wd)
# Read data from downloaded files
features = read.table('./features.txt', header=FALSE)
activity_labels = read.table('./activity_labels.txt', header=FALSE)
subject_train = read.table('./train/subject_train.txt', header=FALSE)
x_train = read.table('./train/x_train.txt', header=FALSE)
y_train = read.table('./train/y_train.txt', header=FALSE)
subject_test = read.table('./test/subject_test.txt', header=FALSE)
x_test = read.table('./test/x_test.txt', header=FALSE)
y_test = read.table('./test/y_test.txt', header=FALSE)
# Set working directory back to original setting
setwd(home_wd)
# Assign column names to the data imported above
colnames(activity_labels) = c('activity_id','activity_type')
colnames(subject_train) = "subject_id"
colnames(x_train) = features[,2]
colnames(y_train) = "activity_id"
View(y_train)
View(activity_labels)
View(features)
View(activity_labels)
View(features)
View(subject_train)
View(x_train)
View(y_train)
my_vector <- features[,2]
print(my_vector)
View(subject_test)
# This program has been developed by KoolWebDezign as part of an assignment from the
# 'Getting And Cleaning Data' course contained within the 'Data Science Specialization'
# offered by John Hopkins University on http://www.coursera.org.
# Please see the included README.md file for further background information on this
# assignment.  Please see also the CodeBook.md file for more information about the technical
# details related to the development and use of this R programming script.
# Get raw data as directed within the assignment and store in local directory named 'data'
# or other folder as controlled by the user_folder variable defined below.  The target data
# file is located on the internet at the following location.
# https://d396qusza40orc.cloudfront.net/getdata%2Fprojectfiles%2FUCI%20HAR%20Dataset.zip
# Clear your workspace from active variables
rm(list=ls())
# Initialize user controlled variables
user_folder <- "data"
# Initialize critical program variables
file_name_str <- "getdata%2Fprojectfiles%2FUCI%20HAR%20Dataset.zip"
local_folder_name <- paste(user_folder, "/getdata-projectfiles-UCI-HAR-Dataset", sep="")
local_file_name <- paste(user_folder, "/", file_name_str, sep="")
# Test for existence of user_folder.  Download data if data is missiing.
if (!file.exists(user_folder)) {
dir.create(user_folder)
# The 'downloader' library is required for execution of this program
test <- require(downloader)
if (!test) {
install.packages("downloader")
require(downloader)
}
# Download the data
data_url <- "https://d396qusza40orc.cloudfront.net/getdata%2Fprojectfiles%2FUCI%20HAR%20Dataset.zip"
download(data_url, dest=local_file_name, mode="wb")
# Unzip the downloaded files
dir.create(local_folder_name)
unzip (local_file_name, exdir=local_folder_name)
}
# Save current working directory for return at end of program
home_wd <- getwd()
# Set new working directory
new_wd <- paste(local_folder_name, "/", "UCI HAR Dataset", sep="")
setwd(new_wd)
# Read data from downloaded files
features = read.table('./features.txt', header=FALSE)
activity_labels = read.table('./activity_labels.txt', header=FALSE)
subject_test = read.table('./test/subject_test.txt', header=FALSE)
x_test = read.table('./test/x_test.txt', header=FALSE)
y_test = read.table('./test/y_test.txt', header=FALSE)
subject_train = read.table('./train/subject_train.txt', header=FALSE)
x_train = read.table('./train/x_train.txt', header=FALSE)
y_train = read.table('./train/y_train.txt', header=FALSE)
# Set working directory back to original setting
setwd(home_wd)
# Assign column names to the new R tables
colnames(features) = c('feature_id','feature_type')
colnames(activity_labels) = c('activity_id','activity_type')
colnames(subject_test) = "subject_id"
colnames(x_test) = features[,2]
colnames(y_test) = "activity_id"
colnames(subject_train) = "subject_id"
colnames(x_train) = features[,2]
colnames(y_train) = "activity_id"
# Create new 'test' and 'training' tables by binding the data from our read files
test_data = cbind(subject_test, y_test, x_test)
train_data = cbind(subject_train, y_train, x_train)
View(test_data)
tidy_data = rbind(test_data, train_data)
View(tidy_data)
full_data = rbind(test_data, train_data)
final_data = merge(final_data, activity_labels, by='activity_id', all.x=TRUE)
final_data = merge(full_data, activity_labels, by='activity_id', all.x=TRUE)
View(final_data)
View(full_data)
View(activity_labels)
View(activity_labels)
test <- final_data[,c("activity_type")]
print(test)
View(final_data)
names <- names(final_data)
names <- gsub('[()]', '', names)
setnames(final_data, names)
library(data.table)
install.packages("data.table")
library(data.table)
setnames(final_data, names)
View(final_data)
# This program has been developed by KoolWebDezign as part of an assignment from the
# 'Getting And Cleaning Data' course contained within the 'Data Science Specialization'
# offered by John Hopkins University on http://www.coursera.org.
# Please see the included README.md file for further background information on this
# assignment.  Please see also the CodeBook.md file for more information about the technical
# details related to the development and use of this R programming script.
# Get raw data as directed within the assignment and store in local directory named 'data'
# or other folder as controlled by the user_folder variable defined below.  The target data
# file is located on the internet at the following location.
# https://d396qusza40orc.cloudfront.net/getdata%2Fprojectfiles%2FUCI%20HAR%20Dataset.zip
# Clear your workspace from active variables
rm(list=ls())
# Initialize user controlled variables
user_folder <- "data"
# Initialize critical program variables
file_name_str <- "getdata%2Fprojectfiles%2FUCI%20HAR%20Dataset.zip"
local_folder_name <- paste(user_folder, "/getdata-projectfiles-UCI-HAR-Dataset", sep="")
local_file_name <- paste(user_folder, "/", file_name_str, sep="")
# Test for existence of user_folder.  Download data if data is missiing.
if (!file.exists(user_folder)) {
dir.create(user_folder)
# The 'downloader' library is required for execution of this program
test <- require(downloader)
if (!test) {
install.packages("downloader")
require(downloader)
}
# Download the data
data_url <- "https://d396qusza40orc.cloudfront.net/getdata%2Fprojectfiles%2FUCI%20HAR%20Dataset.zip"
download(data_url, dest=local_file_name, mode="wb")
# Unzip the downloaded files
dir.create(local_folder_name)
unzip (local_file_name, exdir=local_folder_name)
}
# Save current working directory for return at end of program
home_wd <- getwd()
# Set new working directory
new_wd <- paste(local_folder_name, "/", "UCI HAR Dataset", sep="")
setwd(new_wd)
# Read data from downloaded files
features = read.table('./features.txt', header=FALSE)
activity_labels = read.table('./activity_labels.txt', header=FALSE)
subject_test = read.table('./test/subject_test.txt', header=FALSE)
x_test = read.table('./test/x_test.txt', header=FALSE)
y_test = read.table('./test/y_test.txt', header=FALSE)
subject_train = read.table('./train/subject_train.txt', header=FALSE)
x_train = read.table('./train/x_train.txt', header=FALSE)
y_train = read.table('./train/y_train.txt', header=FALSE)
# Set working directory back to original setting
setwd(home_wd)
# Assign column names to the new R tables
colnames(features) = c('feature_id','feature_type')
colnames(activity_labels) = c('activity_id','activity_type')
colnames(subject_test) = "subject_id"
colnames(x_test) = features[,2]
colnames(y_test) = "activity_id"
colnames(subject_train) = "subject_id"
colnames(x_train) = features[,2]
colnames(y_train) = "activity_id"
# Create new 'test' and 'training' tables by binding the data
# from our read files (use cbind - column bind)
test_data = cbind(subject_test, y_test, x_test)
train_data = cbind(subject_train, y_train, x_train)
# Concatenate the new 'test' and 'training' tables above into
# a single table (use rbind - rowbind)
full_data = rbind(test_data, train_data)
# Merge the 'full_data' set with the 'activity_labels' table
# to include descriptive activity names (equivalent to LEFT OUTER JOIN)
final_data = merge(full_data, activity_labels, by='activity_id', all.x=TRUE)
# ** Decided not to use - tough to dynamically get column names if altered **
# Fix the column names so that they are descriptive and user-friendly
# The 'data.table' library is required for execution of this program
#test <- require(data.table)
#if (!test) {
#  install.packages("data.table")
#  require(data.table)
#}
#names <- names(final_data)
#names <- gsub('[()]', '', names) # Remove the parenthesis and dashes
#setnames(final_data, names)
# Extract sub-set of data such that we extract only the measurements
# on the mean and standard deviation for each measurement
sub_data = subset(final_data, grepl('-(mean|std)[(]', final_data$name))
View(sub_data)
View(full_data)
sub_data = final_data[ grepl( "mean|std", names(final_data) ) ]
View(sub_data)
write.csv(sub_data, file="tidy_data.csv", row.names=FALSE)
write.csv(full_data, file="full_data.csv", row.names=FALSE)
sub_data = final_data[ grepl("subject|activity|mean|std", names(final_data)) ]
View(sub_data)
write.table(full_data, file="full_data.txt", row.names=FALSE)
write.table(sub_data, file="sub_data.txt", row.names=FALSE)
write.csv(sub_data, file="sub_data.csv", row.names=FALSE)
# This program has been developed by KoolWebDezign as part of an assignment from the
# 'Getting And Cleaning Data' course contained within the 'Data Science Specialization'
# offered by John Hopkins University on http://www.coursera.org.
# Please see the included README.md file for further background information on this
# assignment.  Please see also the CodeBook.md file for more information about the technical
# details related to the development and use of this R programming script.
# Get raw data as directed within the assignment and store in local directory named 'data'
# or other folder as controlled by the user_folder variable defined below.  The target data
# file is located on the internet at the following location.
# https://d396qusza40orc.cloudfront.net/getdata%2Fprojectfiles%2FUCI%20HAR%20Dataset.zip
# Clear your workspace from active variables
rm(list=ls())
# Initialize user controlled variables
user_folder <- "data"
# Initialize critical program variables
file_name_str <- "getdata%2Fprojectfiles%2FUCI%20HAR%20Dataset.zip"
local_folder_name <- paste(user_folder, "/getdata-projectfiles-UCI-HAR-Dataset", sep="")
local_file_name <- paste(user_folder, "/", file_name_str, sep="")
# Test for existence of user_folder.  Download data if data is missiing.
if (!file.exists(user_folder)) {
dir.create(user_folder)
# The 'downloader' library is required for execution of this program
test <- require(downloader)
if (!test) {
install.packages("downloader")
require(downloader)
}
# Download the data
data_url <- "https://d396qusza40orc.cloudfront.net/getdata%2Fprojectfiles%2FUCI%20HAR%20Dataset.zip"
download(data_url, dest=local_file_name, mode="wb")
# Unzip the downloaded files
dir.create(local_folder_name)
unzip (local_file_name, exdir=local_folder_name)
}
# Save current working directory for return at end of program
home_wd <- getwd()
# Set new working directory
new_wd <- paste(local_folder_name, "/", "UCI HAR Dataset", sep="")
setwd(new_wd)
# Read data from downloaded files
features = read.table('./features.txt', header=FALSE)
activity_labels = read.table('./activity_labels.txt', header=FALSE)
subject_test = read.table('./test/subject_test.txt', header=FALSE)
x_test = read.table('./test/x_test.txt', header=FALSE)
y_test = read.table('./test/y_test.txt', header=FALSE)
subject_train = read.table('./train/subject_train.txt', header=FALSE)
x_train = read.table('./train/x_train.txt', header=FALSE)
y_train = read.table('./train/y_train.txt', header=FALSE)
# Set working directory back to original setting
setwd(home_wd)
# Assign column names to the new R tables
colnames(features) = c('feature_id','feature_type')
colnames(activity_labels) = c('activity_id','activity_type')
colnames(subject_test) = "subject_id"
colnames(x_test) = features[,2]
colnames(y_test) = "activity_id"
colnames(subject_train) = "subject_id"
colnames(x_train) = features[,2]
colnames(y_train) = "activity_id"
# Create new 'test' and 'training' tables by binding the data
# from our read files (use cbind - column bind)
test_data = cbind(subject_test, y_test, x_test)
train_data = cbind(subject_train, y_train, x_train)
# Concatenate the new 'test' and 'training' tables above into
# a single table (use rbind - rowbind)
full_data = rbind(test_data, train_data)
# Merge the 'full_data' set with the 'activity_labels' table
# to include descriptive activity names (equivalent to LEFT OUTER JOIN)
final_data = merge(full_data, activity_labels, by='activity_id', all.x=TRUE)
# ** Decided not to use - tough to dynamically get column names if altered **
# Fix the column names so that they are descriptive and user-friendly
# The 'data.table' library is required for execution of this program
#test <- require(data.table)
#if (!test) {
#  install.packages("data.table")
#  require(data.table)
#}
#names <- names(final_data)
#names <- gsub('[()]', '', names) # Remove the parenthesis and dashes
#setnames(final_data, names)
# Extract sub-set of data such that we extract only the measurements
# on the mean and standard deviation for each measurement
sub_data = final_data[ grepl("subject|activity|mean|std", names(final_data)) ]
# Output tidy data files to CSV files
write.csv(full_data, file="full_data.csv", row.names=FALSE)
write.csv(sub_data, file="sub_data.csv", row.names=FALSE)
# Output tidy data files to TXT files (as instructed by professor)
write.table(full_data, file="full_data.txt", row.names=FALSE)
write.table(sub_data, file="sub_data.txt", row.names=FALSE)
# Clear your workspace from active variables
# This step is optional yet it clears memory intensive information
#rm(list=ls())
rm(list=ls())
